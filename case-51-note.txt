üß† JavaScript Prototype Methods - Quick Notes

--------------------------------------------------
üìå What is a Prototype Method?

- A way to add new behavior to all instances of a type (e.g. String, Array).
- Syntax example (for String):
  
  Object.defineProperty(String.prototype, 'methodName', {
    value: function () {
      // "this" refers to the string
    }
  });

--------------------------------------------------
‚úÖ Why Use It?

- Cleaner syntax: "hello".toJadenCase() vs toJadenCase("hello")
- Reusable on every instance
- Feels like built-in behavior (like .toUpperCase())

--------------------------------------------------
‚ö†Ô∏è When NOT to Use

- When building libraries or shared code (might pollute global objects)
- When naming conflicts can happen
- If your team prefers functional utils over prototype extensions

--------------------------------------------------
üß∞ Real Frontend Example - Email Validator

Object.defineProperty(String.prototype, 'isEmail', {
  value: function () {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this);
  }
});

Usage:
"me@example.com".isEmail(); // true
"invalid-email".isEmail();  // false

--------------------------------------------------
üí° Use Case Summary

| Use Case                           | Recommendation              |
|-----------------------------------|-----------------------------|
| Want to use like func("str")      | Use regular function        |
| Want to use like "str".func()     | Use prototype method        |
| Reusable across all strings       | ‚úÖ Yes with prototype        |
| Easier to test/debug              | ‚úÖ Yes in small projects     |

--------------------------------------------------
üéØ Final Tip

- You can use "this" inside the prototype method to refer to the value the method is called on.
- No need to pass a parameter like `str` when using prototype methods ‚Äî just use `this`.

